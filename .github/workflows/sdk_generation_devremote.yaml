name: Generate alpha SDK from dev-remote
permissions:
  checks: write
  contents: write
  pull-requests: write
  statuses: write

on:
  workflow_dispatch: {}
  pull_request:
    types: [labeled, unlabeled]

jobs:
  check-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure workflow is run from dev-remote branch
        run: |
          if [[ "${GITHUB_REF_NAME}" != "dev-remote" ]]; then
            echo "This workflow can only be run from the dev-remote branch."
            exit 1
          fi

  compute-version:
    needs: check-branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout dev-remote
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: dev-remote
          fetch-depth: 0

      - name: Install yq
        run: |
          sudo curl -L https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Compute prerelease version (X.Y.Za<n>)
        id: ver
        run: |
          BASE=$(yq '.python.version' .speakeasy/gen.yaml)
          BASE=$(echo "$BASE" | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*$/\1/')

          IFS='.' read -r major minor patch <<< "$BASE"
          patch=$((patch + 1))
          BASE="${major}.${minor}.${patch}"

          PREFIX="${BASE}a"    # append 'a'

          echo "Base version: ${BASE}"
          echo "Prefix: ${PREFIX}"

          echo "Fetching remote tags..."
          # Make sure we have remote tags info
          git fetch --tags --quiet

          echo "Available remote tags:"
          git ls-remote --tags origin | tail -n 20

          # Find first unused tag by checking remote tags one-by-one
          n=1
          while true; do
            echo "Checking if tag exists: ${PREFIX}${n}"
            out=$(git ls-remote --tags origin "${PREFIX}${n}" || true)
            echo "ls-remote output: $out"

            if [[ -z "$out" ]]; then
              break
            fi
            n=$((n+1))
          done

          FINAL="${PREFIX}${n}"
          echo "version=${FINAL}" >> "$GITHUB_OUTPUT"
          echo "Computed prerelease: ${FINAL}"

  generate:
    needs: [check-branch, compute-version]
    uses: speakeasy-api/sdk-generation-action/.github/workflows/workflow-executor.yaml@57452fc95969792de6734a91400a24aeb409964c
    with:
      force: true
      mode: pr
      set_version: ${{ needs.compute-version.outputs.version }}
    secrets:
      github_access_token: ${{ secrets.GITHUB_TOKEN }}
      pypi_token: ${{ secrets.PYPI_TOKEN }}
      speakeasy_api_key: ${{ secrets.SPEAKEASY_API_KEY }}
