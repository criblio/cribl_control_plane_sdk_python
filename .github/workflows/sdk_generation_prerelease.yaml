name: Generate RC SDK (Prerelease)
permissions:
  checks: write
  contents: write
  pull-requests: write
  statuses: write

on:
  workflow_dispatch: {}
  pull_request:
    types: [labeled, unlabeled]

jobs:
  check-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure workflow is run from openapi-prerelease branch
        run: |
          if [[ "${GITHUB_REF_NAME}" != "openapi-prerelease" ]]; then
            echo "This workflow can only be run from the openapi-prerelease branch."
            exit 1
          fi

  compute-version:
    needs: check-branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout openapi-prerelease
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: openapi-prerelease
          fetch-depth: 0

      - name: Install yq
        run: |
          sudo curl -L https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Compute prerelease version (X.Y.Zrc<n>)
        id: ver
        run: |
          set -euo pipefail

          BASE_GEN=$(yq -r '.python.version' .speakeasy/gen.yaml)
          # Strip any existing prerelease suffix (e.g. 1.2.3rc5 -> 1.2.3 or 1.2.3a1 -> 1.2.3)
          BASE_STRIPPED=$(printf '%s' "${BASE_GEN}" | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

          echo "Version from gen.yaml: ${BASE_GEN}"
          echo "Stripped base:         ${BASE_STRIPPED}"

          # Fetch tags (add --refs to avoid peeled ^{} entries)
          git fetch --tags --quiet || true

          # DEBUG: show last tags
          echo "Last tags on origin:"
          git ls-remote --tags --refs origin | awk '{print $2}' | sed 's|refs/tags/||' | tail -n 50 || true

          # If there are rc tags for BASE_STRIPPED (with or without leading 'v'), keep that base; otherwise bump patch
          if git ls-remote --tags --refs origin | awk '{print $2}' | sed 's|refs/tags/||' \
              | grep -qE "^(v)?${BASE_STRIPPED}rc[0-9]+$"; then
            BASE="${BASE_STRIPPED}"
            echo "Found existing rc tags for ${BASE}. Will increment rc."
          else
            IFS='.' read -r major minor patch <<< "${BASE_STRIPPED}"
            patch=$((patch + 1))
            BASE="${major}.${minor}.${patch}"
            echo "No rc tags for ${BASE_STRIPPED}. Bumping patch to ${BASE} and starting rc1."
          fi

          PREFIX="${BASE}rc"

          # Helper to check tag existence with/without 'v' (use --refs; no sed with \^\{\})
          tag_exists() {
            git ls-remote --tags --refs origin | awk '{print $2}' | sed 's|refs/tags/||' \
              | grep -qx -e "${1}" -e "v${1}"
          }

          # Find next available rc number (with logging)
          n=1
          while tag_exists "${PREFIX}${n}"; do
            echo "Tag already exists: ${PREFIX}${n} (or v${PREFIX}${n}), trying next..."
            n=$((n+1))
          done

          echo "First free rc tag: ${PREFIX}${n}"
          FINAL="${PREFIX}${n}"
          echo "Computed prerelease (Python format): ${FINAL}"
          echo "version=${FINAL}" >> "$GITHUB_OUTPUT"

  generate:
    needs: [check-branch, compute-version]
    uses: speakeasy-api/sdk-generation-action/.github/workflows/workflow-executor.yaml@1f1527d823ac3dc23f8aba805d1350024ad783fd
    with:
      force: true
      mode: pr
      set_version: ${{ needs.compute-version.outputs.version }}
    secrets:
      github_access_token: ${{ secrets.GITHUB_TOKEN }}
      pypi_token: ${{ secrets.PYPI_TOKEN }}
      speakeasy_api_key: ${{ secrets.SPEAKEASY_API_KEY }}
