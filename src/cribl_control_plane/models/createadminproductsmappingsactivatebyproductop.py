"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productscore import ProductsCore
from .rulesetid import RulesetID, RulesetIDTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import (
    FieldMetadata,
    PathParamMetadata,
    RequestMetadata,
    validate_open_enum,
)
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateAdminProductsMappingsActivateByProductRequestTypedDict(TypedDict):
    product: ProductsCore
    r"""Name of the Cribl product to activate the Mapping Ruleset for"""
    ruleset_id: RulesetIDTypedDict
    r"""RulesetId object"""


class CreateAdminProductsMappingsActivateByProductRequest(BaseModel):
    product: Annotated[
        Annotated[ProductsCore, PlainValidator(validate_open_enum(False))],
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Name of the Cribl product to activate the Mapping Ruleset for"""

    ruleset_id: Annotated[
        RulesetID, FieldMetadata(request=RequestMetadata(media_type="application/json"))
    ]
    r"""RulesetId object"""


class CreateAdminProductsMappingsActivateByProductResponseTypedDict(TypedDict):
    r"""The <code>id</code> of the Mapping Ruleset that has been successfully activated"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[RulesetIDTypedDict]]


class CreateAdminProductsMappingsActivateByProductResponse(BaseModel):
    r"""The <code>id</code> of the Mapping Ruleset that has been successfully activated"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[RulesetID]] = None
