"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import models, utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic import field_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Role(str, Enum, metaclass=utils.OpenEnumMeta):
    STANDBY = "standby"
    PRIMARY = "primary"


class Status(str, Enum, metaclass=utils.OpenEnumMeta):
    SHUTTING_DOWN = "shutting down"
    HEALTHY = "healthy"
    STANDBY = "standby"


class HealthServerStatusTypedDict(TypedDict):
    start_time: float
    status: Status
    role: NotRequired[Role]


class HealthServerStatus(BaseModel):
    start_time: Annotated[float, pydantic.Field(alias="startTime")]

    status: Annotated[Status, PlainValidator(validate_open_enum(False))]

    role: Annotated[Optional[Role], PlainValidator(validate_open_enum(False))] = None

    @field_serializer("role")
    def serialize_role(self, value):
        if isinstance(value, str):
            try:
                return models.Role(value)
            except ValueError:
                return value
        return value

    @field_serializer("status")
    def serialize_status(self, value):
        if isinstance(value, str):
            try:
                return models.Status(value)
            except ValueError:
                return value
        return value
