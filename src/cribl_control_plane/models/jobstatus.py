"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import models, utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
from pydantic import field_serializer
from pydantic.functional_validators import PlainValidator
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class State(int, Enum, metaclass=utils.OpenEnumMeta):
    r"""State of the Job"""

    INITIALIZING = 0
    PENDING = 1
    RUNNING = 2
    PAUSED = 3
    CANCELLED = 4
    FINISHED = 5
    FAILED = 6
    ORPHANED = 7
    UNKNOWN = 8
    LENGTH = 9


class JobStatusTypedDict(TypedDict):
    state: State
    r"""State of the Job"""
    reason: NotRequired[Dict[str, Any]]


class JobStatus(BaseModel):
    state: Annotated[State, PlainValidator(validate_open_enum(True))]
    r"""State of the Job"""

    reason: Optional[Dict[str, Any]] = None

    @field_serializer("state")
    def serialize_state(self, value):
        if isinstance(value, str):
            try:
                return models.State(value)
            except ValueError:
                return value
        return value
