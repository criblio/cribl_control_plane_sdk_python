"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ID(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Unique function identifier. Must always be 'eval'."""

    EVAL = "eval"


class AddTypedDict(TypedDict):
    name: str
    value: str


class Add(BaseModel):
    name: str

    value: str


class FunctionConfTypedDict(TypedDict):
    add: List[AddTypedDict]
    r"""Fields to add in this eval function"""


class FunctionConf(BaseModel):
    add: List[Add]
    r"""Fields to add in this eval function"""


class FunctionTypedDict(TypedDict):
    id: ID
    r"""Unique function identifier. Must always be 'eval'."""
    filter_: str
    r"""Filter expression controlling when this function runs"""
    final: bool
    r"""Marks whether this function is final in the chain. Must always be true."""
    conf: FunctionConfTypedDict
    description: NotRequired[str]
    r"""Optional function description"""
    disabled: NotRequired[bool]
    r"""Indicates whether the function is disabled"""


class Function(BaseModel):
    id: Annotated[ID, PlainValidator(validate_open_enum(False))]
    r"""Unique function identifier. Must always be 'eval'."""

    filter_: Annotated[str, pydantic.Field(alias="filter")]
    r"""Filter expression controlling when this function runs"""

    final: bool
    r"""Marks whether this function is final in the chain. Must always be true."""

    conf: FunctionConf

    description: Optional[str] = None
    r"""Optional function description"""

    disabled: Optional[bool] = None
    r"""Indicates whether the function is disabled"""


class MappingRulesetConfTypedDict(TypedDict):
    functions: NotRequired[List[FunctionTypedDict]]
    r"""List of functions to pass data through"""


class MappingRulesetConf(BaseModel):
    functions: Optional[List[Function]] = None
    r"""List of functions to pass data through"""


class MappingRulesetTypedDict(TypedDict):
    id: str
    conf: NotRequired[MappingRulesetConfTypedDict]
    active: NotRequired[bool]


class MappingRuleset(BaseModel):
    id: str

    conf: Optional[MappingRulesetConf] = None

    active: Optional[bool] = None
