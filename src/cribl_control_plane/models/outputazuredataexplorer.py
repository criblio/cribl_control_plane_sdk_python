"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputAzureDataExplorerType(str, Enum):
    AZURE_DATA_EXPLORER = "azure_data_explorer"


class IngestionMode(str, Enum, metaclass=utils.OpenEnumMeta):
    # Batching
    BATCHING = "batching"
    # Streaming
    STREAMING = "streaming"


class OutputAzureDataExplorerMicrosoftEntraIDAuthenticationEndpoint(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Endpoint used to acquire authentication tokens from Azure"""

    HTTPS_LOGIN_MICROSOFTONLINE_COM = "https://login.microsoftonline.com"
    HTTPS_LOGIN_MICROSOFTONLINE_US = "https://login.microsoftonline.us"
    HTTPS_LOGIN_PARTNER_MICROSOFTONLINE_CN = "https://login.partner.microsoftonline.cn"


class OutputAzureDataExplorerAuthenticationMethod(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""The type of OAuth 2.0 client credentials grant flow to use"""

    # Client secret
    CLIENT_SECRET = "clientSecret"
    # Client secret (text secret)
    CLIENT_TEXT_SECRET = "clientTextSecret"
    # Certificate
    CERTIFICATE = "certificate"


class OutputAzureDataExplorerCertificateTypedDict(TypedDict):
    certificate_name: NotRequired[str]
    r"""The certificate you registered as credentials for your app in the Azure portal"""


class OutputAzureDataExplorerCertificate(BaseModel):
    certificate_name: Annotated[
        Optional[str], pydantic.Field(alias="certificateName")
    ] = None
    r"""The certificate you registered as credentials for your app in the Azure portal"""


class OutputAzureDataExplorerDataFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Format of the output data"""

    # JSON
    JSON = "json"
    # Raw
    RAW = "raw"
    # Parquet
    PARQUET = "parquet"


class OutputAzureDataExplorerCompressCompression(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Data compression format to apply to HTTP content before it is delivered"""

    NONE = "none"
    GZIP = "gzip"


class OutputAzureDataExplorerCompressionLevel(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Compression level to apply before moving files to final destination"""

    # Best Speed
    BEST_SPEED = "best_speed"
    # Normal
    NORMAL = "normal"
    # Best Compression
    BEST_COMPRESSION = "best_compression"


class OutputAzureDataExplorerParquetVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Determines which data types are supported and how they are represented"""

    # 1.0
    PARQUET_1_0 = "PARQUET_1_0"
    # 2.4
    PARQUET_2_4 = "PARQUET_2_4"
    # 2.6
    PARQUET_2_6 = "PARQUET_2_6"


class OutputAzureDataExplorerDataPageVersion(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it."""

    # V1
    DATA_PAGE_V1 = "DATA_PAGE_V1"
    # V2
    DATA_PAGE_V2 = "DATA_PAGE_V2"


class OutputAzureDataExplorerKeyValueMetadatumTypedDict(TypedDict):
    value: str
    key: NotRequired[str]


class OutputAzureDataExplorerKeyValueMetadatum(BaseModel):
    value: str

    key: Optional[str] = ""


class OutputAzureDataExplorerBackpressureBehavior(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""How to handle events when all receivers are exerting backpressure"""

    # Block
    BLOCK = "block"
    # Drop
    DROP = "drop"
    # Persistent Queue
    QUEUE = "queue"


class OutputAzureDataExplorerDiskSpaceProtection(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""How to handle events when disk space is below the global 'Min free disk space' limit"""

    # Block
    BLOCK = "block"
    # Drop
    DROP = "drop"


class PrefixOptional(str, Enum, metaclass=utils.OpenEnumMeta):
    # drop-by
    DROP_BY = "dropBy"
    # ingest-by
    INGEST_BY = "ingestBy"


class ExtentTagTypedDict(TypedDict):
    value: str
    prefix: NotRequired[PrefixOptional]


class ExtentTag(BaseModel):
    value: str

    prefix: Annotated[
        Optional[PrefixOptional], PlainValidator(validate_open_enum(False))
    ] = None


class IngestIfNotExistTypedDict(TypedDict):
    value: str


class IngestIfNotExist(BaseModel):
    value: str


class ReportLevel(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Level of ingestion status reporting. Defaults to FailuresOnly."""

    # FailuresOnly
    FAILURES_ONLY = "failuresOnly"
    # DoNotReport
    DO_NOT_REPORT = "doNotReport"
    # FailuresAndSuccesses
    FAILURES_AND_SUCCESSES = "failuresAndSuccesses"


class ReportMethod(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Target of the ingestion status reporting. Defaults to Queue."""

    # Queue
    QUEUE = "queue"
    # Table
    TABLE = "table"
    # QueueAndTable
    QUEUE_AND_TABLE = "queueAndTable"


class AdditionalPropertyTypedDict(TypedDict):
    key: str
    value: str


class AdditionalProperty(BaseModel):
    key: str

    value: str


class OutputAzureDataExplorerResponseRetrySettingTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputAzureDataExplorerResponseRetrySetting(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputAzureDataExplorerTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputAzureDataExplorerTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputAzureDataExplorerMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    # Error
    ERROR = "error"
    # Backpressure
    ALWAYS = "always"
    # Always On
    BACKPRESSURE = "backpressure"


class OutputAzureDataExplorerPqCompressCompression(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Codec to use to compress the persisted data"""

    # None
    NONE = "none"
    # Gzip
    GZIP = "gzip"


class OutputAzureDataExplorerQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    # Block
    BLOCK = "block"
    # Drop new data
    DROP = "drop"


class OutputAzureDataExplorerPqControlsTypedDict(TypedDict):
    pass


class OutputAzureDataExplorerPqControls(BaseModel):
    pass


class OutputAzureDataExplorerTypedDict(TypedDict):
    type: OutputAzureDataExplorerType
    cluster_url: str
    r"""The base URI for your cluster. Typically, `https://<cluster>.<region>.kusto.windows.net`."""
    database: str
    r"""Name of the database containing the table where data will be ingested"""
    table: str
    r"""Name of the table to ingest data into"""
    tenant_id: str
    r"""Directory ID (tenant identifier) in Azure Active Directory"""
    client_id: str
    r"""client_id to pass in the OAuth request parameter"""
    scope: str
    r"""Scope to pass in the OAuth request parameter"""
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    validate_database_settings: NotRequired[bool]
    r"""When saving or starting the Destination, validate the database name and credentials; also validate table name, except when creating a new table. Disable if your Azure app does not have both the Database Viewer and the Table Viewer role."""
    ingest_mode: NotRequired[IngestionMode]
    oauth_endpoint: NotRequired[
        OutputAzureDataExplorerMicrosoftEntraIDAuthenticationEndpoint
    ]
    r"""Endpoint used to acquire authentication tokens from Azure"""
    oauth_type: NotRequired[OutputAzureDataExplorerAuthenticationMethod]
    r"""The type of OAuth 2.0 client credentials grant flow to use"""
    description: NotRequired[str]
    client_secret: NotRequired[str]
    r"""The client secret that you generated for your app in the Azure portal"""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    certificate: NotRequired[OutputAzureDataExplorerCertificateTypedDict]
    format_: NotRequired[OutputAzureDataExplorerDataFormat]
    r"""Format of the output data"""
    compress: NotRequired[OutputAzureDataExplorerCompressCompression]
    r"""Data compression format to apply to HTTP content before it is delivered"""
    compression_level: NotRequired[OutputAzureDataExplorerCompressionLevel]
    r"""Compression level to apply before moving files to final destination"""
    automatic_schema: NotRequired[bool]
    r"""Automatically calculate the schema based on the events of each Parquet file generated"""
    parquet_schema: NotRequired[str]
    r"""To add a new schema, navigate to Processing > Knowledge > Parquet Schemas"""
    parquet_version: NotRequired[OutputAzureDataExplorerParquetVersion]
    r"""Determines which data types are supported and how they are represented"""
    parquet_data_page_version: NotRequired[OutputAzureDataExplorerDataPageVersion]
    r"""Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it."""
    parquet_row_group_length: NotRequired[float]
    r"""The number of rows that every group will contain. The final group can contain a smaller number of rows."""
    parquet_page_size: NotRequired[str]
    r"""Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression."""
    should_log_invalid_rows: NotRequired[bool]
    r"""Log up to 3 rows that @{product} skips due to data mismatch"""
    key_value_metadata: NotRequired[
        List[OutputAzureDataExplorerKeyValueMetadatumTypedDict]
    ]
    r"""The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: \"key\":\"OCSF Event Class\", \"value\":\"9001\" """
    enable_statistics: NotRequired[bool]
    r"""Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics."""
    enable_write_page_index: NotRequired[bool]
    r"""One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping."""
    enable_page_checksum: NotRequired[bool]
    r"""Parquet tools can use the checksum of a Parquet page to verify data integrity"""
    remove_empty_dirs: NotRequired[bool]
    r"""Remove empty staging directories after moving files"""
    empty_dir_cleanup_sec: NotRequired[float]
    r"""How frequently, in seconds, to clean up empty directories"""
    deadletter_enabled: NotRequired[bool]
    r"""If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors"""
    deadletter_path: NotRequired[str]
    r"""Storage location for files that fail to reach their final destination after maximum retries are exceeded"""
    max_retry_num: NotRequired[float]
    r"""The maximum number of times a file will attempt to move to its final destination before being dead-lettered"""
    is_mapping_obj: NotRequired[bool]
    r"""Send a JSON mapping object instead of specifying an existing named data mapping"""
    mapping_obj: NotRequired[str]
    r"""Enter a JSON object that defines your desired data mapping"""
    mapping_ref: NotRequired[str]
    r"""Enter the name of a data mapping associated with your target table. Or, if incoming event and target table fields match exactly, you can leave the field empty."""
    ingest_url: NotRequired[str]
    r"""The ingestion service URI for your cluster. Typically, `https://ingest-<cluster>.<region>.kusto.windows.net`."""
    on_backpressure: NotRequired[OutputAzureDataExplorerBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    stage_path: NotRequired[str]
    r"""Filesystem location in which to buffer files before compressing and moving to final destination. Use performant and stable storage."""
    file_name_suffix: NotRequired[str]
    r"""JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`)."""
    max_file_size_mb: NotRequired[float]
    r"""Maximum uncompressed output file size. Files of this size will be closed and moved to final output location."""
    max_file_open_time_sec: NotRequired[float]
    r"""Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location."""
    max_file_idle_time_sec: NotRequired[float]
    r"""Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location."""
    max_open_files: NotRequired[float]
    r"""Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location."""
    max_concurrent_file_parts: NotRequired[float]
    r"""Maximum number of parts to upload in parallel per file"""
    on_disk_full_backpressure: NotRequired[OutputAzureDataExplorerDiskSpaceProtection]
    r"""How to handle events when disk space is below the global 'Min free disk space' limit"""
    add_id_to_stage_path: NotRequired[bool]
    r"""Add the Output ID value to staging location"""
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_immediately: NotRequired[bool]
    r"""Bypass the data management service's aggregation mechanism"""
    retain_blob_on_success: NotRequired[bool]
    r"""Prevent blob deletion after ingestion is complete"""
    extent_tags: NotRequired[List[ExtentTagTypedDict]]
    r"""Strings or tags associated with the extent (ingested data shard)"""
    ingest_if_not_exists: NotRequired[List[IngestIfNotExistTypedDict]]
    r"""Prevents duplicate ingestion by verifying whether an extent with the specified ingest-by tag already exists"""
    report_level: NotRequired[ReportLevel]
    r"""Level of ingestion status reporting. Defaults to FailuresOnly."""
    report_method: NotRequired[ReportMethod]
    r"""Target of the ingestion status reporting. Defaults to Queue."""
    additional_properties: NotRequired[List[AdditionalPropertyTypedDict]]
    r"""Optionally, enter additional configuration properties to send to the ingestion service"""
    response_retry_settings: NotRequired[
        List[OutputAzureDataExplorerResponseRetrySettingTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""
    timeout_retry_settings: NotRequired[
        OutputAzureDataExplorerTimeoutRetrySettingsTypedDict
    ]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking"""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body"""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    use_round_robin_dns: NotRequired[bool]
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    keep_alive: NotRequired[bool]
    r"""Disable to close the connection immediately after sending the outgoing request"""
    pq_strict_ordering: NotRequired[bool]
    r"""Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed."""
    pq_rate_per_sec: NotRequired[float]
    r"""Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling."""
    pq_mode: NotRequired[OutputAzureDataExplorerMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_max_buffer_size: NotRequired[float]
    r"""The maximum number of events to hold in memory before writing the events to disk"""
    pq_max_backpressure_sec: NotRequired[float]
    r"""How long (in seconds) to wait for backpressure to resolve before engaging the queue"""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputAzureDataExplorerPqCompressCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputAzureDataExplorerQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_controls: NotRequired[OutputAzureDataExplorerPqControlsTypedDict]


class OutputAzureDataExplorer(BaseModel):
    type: OutputAzureDataExplorerType

    cluster_url: Annotated[str, pydantic.Field(alias="clusterUrl")]
    r"""The base URI for your cluster. Typically, `https://<cluster>.<region>.kusto.windows.net`."""

    database: str
    r"""Name of the database containing the table where data will be ingested"""

    table: str
    r"""Name of the table to ingest data into"""

    tenant_id: Annotated[str, pydantic.Field(alias="tenantId")]
    r"""Directory ID (tenant identifier) in Azure Active Directory"""

    client_id: Annotated[str, pydantic.Field(alias="clientId")]
    r"""client_id to pass in the OAuth request parameter"""

    scope: str
    r"""Scope to pass in the OAuth request parameter"""

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    validate_database_settings: Annotated[
        Optional[bool], pydantic.Field(alias="validateDatabaseSettings")
    ] = True
    r"""When saving or starting the Destination, validate the database name and credentials; also validate table name, except when creating a new table. Disable if your Azure app does not have both the Database Viewer and the Table Viewer role."""

    ingest_mode: Annotated[
        Annotated[Optional[IngestionMode], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="ingestMode"),
    ] = IngestionMode.BATCHING

    oauth_endpoint: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerMicrosoftEntraIDAuthenticationEndpoint],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="oauthEndpoint"),
    ] = OutputAzureDataExplorerMicrosoftEntraIDAuthenticationEndpoint.HTTPS_LOGIN_MICROSOFTONLINE_COM
    r"""Endpoint used to acquire authentication tokens from Azure"""

    oauth_type: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerAuthenticationMethod],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="oauthType"),
    ] = OutputAzureDataExplorerAuthenticationMethod.CLIENT_SECRET
    r"""The type of OAuth 2.0 client credentials grant flow to use"""

    description: Optional[str] = None

    client_secret: Annotated[Optional[str], pydantic.Field(alias="clientSecret")] = None
    r"""The client secret that you generated for your app in the Azure portal"""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    certificate: Optional[OutputAzureDataExplorerCertificate] = None

    format_: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerDataFormat],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="format"),
    ] = OutputAzureDataExplorerDataFormat.JSON
    r"""Format of the output data"""

    compress: Annotated[
        Optional[OutputAzureDataExplorerCompressCompression],
        PlainValidator(validate_open_enum(False)),
    ] = OutputAzureDataExplorerCompressCompression.GZIP
    r"""Data compression format to apply to HTTP content before it is delivered"""

    compression_level: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerCompressionLevel],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="compressionLevel"),
    ] = OutputAzureDataExplorerCompressionLevel.BEST_SPEED
    r"""Compression level to apply before moving files to final destination"""

    automatic_schema: Annotated[
        Optional[bool], pydantic.Field(alias="automaticSchema")
    ] = False
    r"""Automatically calculate the schema based on the events of each Parquet file generated"""

    parquet_schema: Annotated[Optional[str], pydantic.Field(alias="parquetSchema")] = (
        None
    )
    r"""To add a new schema, navigate to Processing > Knowledge > Parquet Schemas"""

    parquet_version: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerParquetVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="parquetVersion"),
    ] = OutputAzureDataExplorerParquetVersion.PARQUET_2_6
    r"""Determines which data types are supported and how they are represented"""

    parquet_data_page_version: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerDataPageVersion],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="parquetDataPageVersion"),
    ] = OutputAzureDataExplorerDataPageVersion.DATA_PAGE_V2
    r"""Serialization format of data pages. Note that some reader implementations use Data page V2's attributes to work more efficiently, while others ignore it."""

    parquet_row_group_length: Annotated[
        Optional[float], pydantic.Field(alias="parquetRowGroupLength")
    ] = 10000
    r"""The number of rows that every group will contain. The final group can contain a smaller number of rows."""

    parquet_page_size: Annotated[
        Optional[str], pydantic.Field(alias="parquetPageSize")
    ] = "1MB"
    r"""Target memory size for page segments, such as 1MB or 128MB. Generally, lower values improve reading speed, while higher values improve compression."""

    should_log_invalid_rows: Annotated[
        Optional[bool], pydantic.Field(alias="shouldLogInvalidRows")
    ] = None
    r"""Log up to 3 rows that @{product} skips due to data mismatch"""

    key_value_metadata: Annotated[
        Optional[List[OutputAzureDataExplorerKeyValueMetadatum]],
        pydantic.Field(alias="keyValueMetadata"),
    ] = None
    r"""The metadata of files the Destination writes will include the properties you add here as key-value pairs. Useful for tagging. Examples: \"key\":\"OCSF Event Class\", \"value\":\"9001\" """

    enable_statistics: Annotated[
        Optional[bool], pydantic.Field(alias="enableStatistics")
    ] = True
    r"""Statistics profile an entire file in terms of minimum/maximum values within data, numbers of nulls, etc. You can use Parquet tools to view statistics."""

    enable_write_page_index: Annotated[
        Optional[bool], pydantic.Field(alias="enableWritePageIndex")
    ] = True
    r"""One page index contains statistics for one data page. Parquet readers use statistics to enable page skipping."""

    enable_page_checksum: Annotated[
        Optional[bool], pydantic.Field(alias="enablePageChecksum")
    ] = False
    r"""Parquet tools can use the checksum of a Parquet page to verify data integrity"""

    remove_empty_dirs: Annotated[
        Optional[bool], pydantic.Field(alias="removeEmptyDirs")
    ] = True
    r"""Remove empty staging directories after moving files"""

    empty_dir_cleanup_sec: Annotated[
        Optional[float], pydantic.Field(alias="emptyDirCleanupSec")
    ] = 300
    r"""How frequently, in seconds, to clean up empty directories"""

    deadletter_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="deadletterEnabled")
    ] = False
    r"""If a file fails to move to its final destination after the maximum number of retries, move it to a designated directory to prevent further errors"""

    deadletter_path: Annotated[
        Optional[str], pydantic.Field(alias="deadletterPath")
    ] = "$CRIBL_HOME/state/outputs/dead-letter"
    r"""Storage location for files that fail to reach their final destination after maximum retries are exceeded"""

    max_retry_num: Annotated[Optional[float], pydantic.Field(alias="maxRetryNum")] = 20
    r"""The maximum number of times a file will attempt to move to its final destination before being dead-lettered"""

    is_mapping_obj: Annotated[Optional[bool], pydantic.Field(alias="isMappingObj")] = (
        False
    )
    r"""Send a JSON mapping object instead of specifying an existing named data mapping"""

    mapping_obj: Annotated[Optional[str], pydantic.Field(alias="mappingObj")] = None
    r"""Enter a JSON object that defines your desired data mapping"""

    mapping_ref: Annotated[Optional[str], pydantic.Field(alias="mappingRef")] = None
    r"""Enter the name of a data mapping associated with your target table. Or, if incoming event and target table fields match exactly, you can leave the field empty."""

    ingest_url: Annotated[Optional[str], pydantic.Field(alias="ingestUrl")] = None
    r"""The ingestion service URI for your cluster. Typically, `https://ingest-<cluster>.<region>.kusto.windows.net`."""

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputAzureDataExplorerBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    stage_path: Annotated[Optional[str], pydantic.Field(alias="stagePath")] = (
        "$CRIBL_HOME/state/outputs/staging"
    )
    r"""Filesystem location in which to buffer files before compressing and moving to final destination. Use performant and stable storage."""

    file_name_suffix: Annotated[
        Optional[str], pydantic.Field(alias="fileNameSuffix")
    ] = '`.${C.env["CRIBL_WORKER_ID"]}.${__format}${__compression === "gzip" ? ".gz" : ""}`'
    r"""JavaScript expression to define the output filename suffix (can be constant).  The `__format` variable refers to the value of the `Data format` field (`json` or `raw`).  The `__compression` field refers to the kind of compression being used (`none` or `gzip`)."""

    max_file_size_mb: Annotated[
        Optional[float], pydantic.Field(alias="maxFileSizeMB")
    ] = 32
    r"""Maximum uncompressed output file size. Files of this size will be closed and moved to final output location."""

    max_file_open_time_sec: Annotated[
        Optional[float], pydantic.Field(alias="maxFileOpenTimeSec")
    ] = 300
    r"""Maximum amount of time to write to a file. Files open for longer than this will be closed and moved to final output location."""

    max_file_idle_time_sec: Annotated[
        Optional[float], pydantic.Field(alias="maxFileIdleTimeSec")
    ] = 30
    r"""Maximum amount of time to keep inactive files open. Files open for longer than this will be closed and moved to final output location."""

    max_open_files: Annotated[Optional[float], pydantic.Field(alias="maxOpenFiles")] = (
        100
    )
    r"""Maximum number of files to keep open concurrently. When exceeded, @{product} will close the oldest open files and move them to the final output location."""

    max_concurrent_file_parts: Annotated[
        Optional[float], pydantic.Field(alias="maxConcurrentFileParts")
    ] = 1
    r"""Maximum number of parts to upload in parallel per file"""

    on_disk_full_backpressure: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerDiskSpaceProtection],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onDiskFullBackpressure"),
    ] = OutputAzureDataExplorerDiskSpaceProtection.BLOCK
    r"""How to handle events when disk space is below the global 'Min free disk space' limit"""

    add_id_to_stage_path: Annotated[
        Optional[bool], pydantic.Field(alias="addIdToStagePath")
    ] = True
    r"""Add the Output ID value to staging location"""

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_immediately: Annotated[
        Optional[bool], pydantic.Field(alias="flushImmediately")
    ] = False
    r"""Bypass the data management service's aggregation mechanism"""

    retain_blob_on_success: Annotated[
        Optional[bool], pydantic.Field(alias="retainBlobOnSuccess")
    ] = False
    r"""Prevent blob deletion after ingestion is complete"""

    extent_tags: Annotated[
        Optional[List[ExtentTag]], pydantic.Field(alias="extentTags")
    ] = None
    r"""Strings or tags associated with the extent (ingested data shard)"""

    ingest_if_not_exists: Annotated[
        Optional[List[IngestIfNotExist]], pydantic.Field(alias="ingestIfNotExists")
    ] = None
    r"""Prevents duplicate ingestion by verifying whether an extent with the specified ingest-by tag already exists"""

    report_level: Annotated[
        Annotated[Optional[ReportLevel], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="reportLevel"),
    ] = ReportLevel.FAILURES_ONLY
    r"""Level of ingestion status reporting. Defaults to FailuresOnly."""

    report_method: Annotated[
        Annotated[Optional[ReportMethod], PlainValidator(validate_open_enum(False))],
        pydantic.Field(alias="reportMethod"),
    ] = ReportMethod.QUEUE
    r"""Target of the ingestion status reporting. Defaults to Queue."""

    additional_properties: Annotated[
        Optional[List[AdditionalProperty]], pydantic.Field(alias="additionalProperties")
    ] = None
    r"""Optionally, enter additional configuration properties to send to the ingestion service"""

    response_retry_settings: Annotated[
        Optional[List[OutputAzureDataExplorerResponseRetrySetting]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)"""

    timeout_retry_settings: Annotated[
        Optional[OutputAzureDataExplorerTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = True
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    concurrency: Optional[float] = 5
    r"""Maximum number of ongoing requests before blocking"""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 4096
    r"""Maximum size, in KB, of the request body"""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Body size limit."""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Enabled by default. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enable round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    keep_alive: Annotated[Optional[bool], pydantic.Field(alias="keepAlive")] = True
    r"""Disable to close the connection immediately after sending the outgoing request"""

    pq_strict_ordering: Annotated[
        Optional[bool], pydantic.Field(alias="pqStrictOrdering")
    ] = True
    r"""Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed."""

    pq_rate_per_sec: Annotated[
        Optional[float], pydantic.Field(alias="pqRatePerSec")
    ] = 0
    r"""Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerMode],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputAzureDataExplorerMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_max_buffer_size: Annotated[
        Optional[float], pydantic.Field(alias="pqMaxBufferSize")
    ] = 42
    r"""The maximum number of events to hold in memory before writing the events to disk"""

    pq_max_backpressure_sec: Annotated[
        Optional[float], pydantic.Field(alias="pqMaxBackpressureSec")
    ] = 30
    r"""How long (in seconds) to wait for backpressure to resolve before engaging the queue"""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerPqCompressCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputAzureDataExplorerPqCompressCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputAzureDataExplorerQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputAzureDataExplorerQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_controls: Annotated[
        Optional[OutputAzureDataExplorerPqControls], pydantic.Field(alias="pqControls")
    ] = None
