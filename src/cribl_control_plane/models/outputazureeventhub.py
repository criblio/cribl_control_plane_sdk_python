"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_control_plane import utils
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from enum import Enum
import pydantic
from pydantic.functional_validators import PlainValidator
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputAzureEventhubType(str, Enum):
    AZURE_EVENTHUB = "azure_eventhub"


class OutputAzureEventhubAcknowledgments(int, Enum, metaclass=utils.OpenEnumMeta):
    r"""Control the number of required acknowledgments"""

    # Leader
    ONE = 1
    # None
    ZERO = 0
    # All
    MINUS_1 = -1


class OutputAzureEventhubRecordDataFormat(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Format to use to serialize events before writing to the Event Hubs Kafka brokers"""

    # JSON
    JSON = "json"
    # Field _raw
    RAW = "raw"


class OutputAzureEventhubAuthTypeAuthenticationMethod(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Enter password directly, or select a stored secret"""

    MANUAL = "manual"
    SECRET = "secret"


class OutputAzureEventhubSASLMechanism(str, Enum, metaclass=utils.OpenEnumMeta):
    # PLAIN
    PLAIN = "plain"
    # OAUTHBEARER
    OAUTHBEARER = "oauthbearer"


class OutputAzureEventhubClientSecretAuthTypeAuthenticationMethod(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    MANUAL = "manual"
    SECRET = "secret"
    CERTIFICATE = "certificate"


class OutputAzureEventhubMicrosoftEntraIDAuthenticationEndpoint(
    str, Enum, metaclass=utils.OpenEnumMeta
):
    r"""Endpoint used to acquire authentication tokens from Azure"""

    HTTPS_LOGIN_MICROSOFTONLINE_COM = "https://login.microsoftonline.com"
    HTTPS_LOGIN_MICROSOFTONLINE_US = "https://login.microsoftonline.us"
    HTTPS_LOGIN_PARTNER_MICROSOFTONLINE_CN = "https://login.partner.microsoftonline.cn"


class OutputAzureEventhubAuthenticationTypedDict(TypedDict):
    r"""Authentication parameters to use when connecting to brokers. Using TLS is highly recommended."""

    disabled: NotRequired[bool]
    auth_type: NotRequired[OutputAzureEventhubAuthTypeAuthenticationMethod]
    r"""Enter password directly, or select a stored secret"""
    password: NotRequired[str]
    r"""Connection-string primary key, or connection-string secondary key, from the Event Hubs workspace"""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    mechanism: NotRequired[OutputAzureEventhubSASLMechanism]
    username: NotRequired[str]
    r"""The username for authentication. For Event Hubs, this should always be $ConnectionString."""
    client_secret_auth_type: NotRequired[
        OutputAzureEventhubClientSecretAuthTypeAuthenticationMethod
    ]
    client_secret: NotRequired[str]
    r"""client_secret to pass in the OAuth request parameter"""
    client_text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    certificate_name: NotRequired[str]
    r"""Select or create a stored certificate"""
    cert_path: NotRequired[str]
    priv_key_path: NotRequired[str]
    passphrase: NotRequired[str]
    oauth_endpoint: NotRequired[
        OutputAzureEventhubMicrosoftEntraIDAuthenticationEndpoint
    ]
    r"""Endpoint used to acquire authentication tokens from Azure"""
    client_id: NotRequired[str]
    r"""client_id to pass in the OAuth request parameter"""
    tenant_id: NotRequired[str]
    r"""Directory ID (tenant identifier) in Azure Active Directory"""
    scope: NotRequired[str]
    r"""Scope to pass in the OAuth request parameter"""


class OutputAzureEventhubAuthentication(BaseModel):
    r"""Authentication parameters to use when connecting to brokers. Using TLS is highly recommended."""

    disabled: Optional[bool] = False

    auth_type: Annotated[
        Annotated[
            Optional[OutputAzureEventhubAuthTypeAuthenticationMethod],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="authType"),
    ] = OutputAzureEventhubAuthTypeAuthenticationMethod.MANUAL
    r"""Enter password directly, or select a stored secret"""

    password: Optional[str] = None
    r"""Connection-string primary key, or connection-string secondary key, from the Event Hubs workspace"""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    mechanism: Annotated[
        Optional[OutputAzureEventhubSASLMechanism],
        PlainValidator(validate_open_enum(False)),
    ] = OutputAzureEventhubSASLMechanism.PLAIN

    username: Optional[str] = "$ConnectionString"
    r"""The username for authentication. For Event Hubs, this should always be $ConnectionString."""

    client_secret_auth_type: Annotated[
        Annotated[
            Optional[OutputAzureEventhubClientSecretAuthTypeAuthenticationMethod],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="clientSecretAuthType"),
    ] = OutputAzureEventhubClientSecretAuthTypeAuthenticationMethod.MANUAL

    client_secret: Annotated[Optional[str], pydantic.Field(alias="clientSecret")] = None
    r"""client_secret to pass in the OAuth request parameter"""

    client_text_secret: Annotated[
        Optional[str], pydantic.Field(alias="clientTextSecret")
    ] = None
    r"""Select or create a stored text secret"""

    certificate_name: Annotated[
        Optional[str], pydantic.Field(alias="certificateName")
    ] = None
    r"""Select or create a stored certificate"""

    cert_path: Annotated[Optional[str], pydantic.Field(alias="certPath")] = None

    priv_key_path: Annotated[Optional[str], pydantic.Field(alias="privKeyPath")] = None

    passphrase: Optional[str] = None

    oauth_endpoint: Annotated[
        Annotated[
            Optional[OutputAzureEventhubMicrosoftEntraIDAuthenticationEndpoint],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="oauthEndpoint"),
    ] = OutputAzureEventhubMicrosoftEntraIDAuthenticationEndpoint.HTTPS_LOGIN_MICROSOFTONLINE_COM
    r"""Endpoint used to acquire authentication tokens from Azure"""

    client_id: Annotated[Optional[str], pydantic.Field(alias="clientId")] = None
    r"""client_id to pass in the OAuth request parameter"""

    tenant_id: Annotated[Optional[str], pydantic.Field(alias="tenantId")] = None
    r"""Directory ID (tenant identifier) in Azure Active Directory"""

    scope: Optional[str] = None
    r"""Scope to pass in the OAuth request parameter"""


class OutputAzureEventhubTLSSettingsClientSideTypedDict(TypedDict):
    disabled: NotRequired[bool]
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another trusted CA (such as the system's)"""


class OutputAzureEventhubTLSSettingsClientSide(BaseModel):
    disabled: Optional[bool] = False

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates that are not authorized by a CA in the CA certificate path, or by another trusted CA (such as the system's)"""


class OutputAzureEventhubBackpressureBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when all receivers are exerting backpressure"""

    # Block
    BLOCK = "block"
    # Drop
    DROP = "drop"
    # Persistent Queue
    QUEUE = "queue"


class OutputAzureEventhubMode(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    # Error
    ERROR = "error"
    # Backpressure
    ALWAYS = "always"
    # Always On
    BACKPRESSURE = "backpressure"


class OutputAzureEventhubCompression(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""Codec to use to compress the persisted data"""

    # None
    NONE = "none"
    # Gzip
    GZIP = "gzip"


class OutputAzureEventhubQueueFullBehavior(str, Enum, metaclass=utils.OpenEnumMeta):
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    # Block
    BLOCK = "block"
    # Drop new data
    DROP = "drop"


class OutputAzureEventhubPqControlsTypedDict(TypedDict):
    pass


class OutputAzureEventhubPqControls(BaseModel):
    pass


class OutputAzureEventhubTypedDict(TypedDict):
    type: OutputAzureEventhubType
    brokers: List[str]
    r"""List of Event Hubs Kafka brokers to connect to, eg. yourdomain.servicebus.windows.net:9093. The hostname can be found in the host portion of the primary or secondary connection string in Shared Access Policies."""
    topic: str
    r"""The name of the Event Hub (Kafka Topic) to publish events. Can be overwritten using field __topicOut."""
    id: NotRequired[str]
    r"""Unique ID for this output"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    ack: NotRequired[OutputAzureEventhubAcknowledgments]
    r"""Control the number of required acknowledgments"""
    format_: NotRequired[OutputAzureEventhubRecordDataFormat]
    r"""Format to use to serialize events before writing to the Event Hubs Kafka brokers"""
    max_record_size_kb: NotRequired[float]
    r"""Maximum size of each record batch before compression. Setting should be < message.max.bytes settings in Event Hubs brokers."""
    flush_event_count: NotRequired[float]
    r"""Maximum number of events in a batch before forcing a flush"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size."""
    connection_timeout: NotRequired[float]
    r"""Maximum time to wait for a connection to complete successfully"""
    request_timeout: NotRequired[float]
    r"""Maximum time to wait for Kafka to respond to a request"""
    max_retries: NotRequired[float]
    r"""If messages are failing, you can set the maximum number of retries as high as 100 to prevent loss of data"""
    max_back_off: NotRequired[float]
    r"""The maximum wait time for a retry, in milliseconds. Default (and minimum) is 30,000 ms (30 seconds); maximum is 180,000 ms (180 seconds)."""
    initial_backoff: NotRequired[float]
    r"""Initial value used to calculate the retry, in milliseconds. Maximum is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Set the backoff multiplier (2-20) to control the retry frequency for failed messages. For faster retries, use a lower multiplier. For slower retries with more delay between attempts, use a higher multiplier. The multiplier is used in an exponential backoff formula; see the Kafka [documentation](https://kafka.js.org/docs/retry-detailed) for details."""
    authentication_timeout: NotRequired[float]
    r"""Maximum time to wait for Kafka to respond to an authentication request"""
    reauthentication_threshold: NotRequired[float]
    r"""Specifies a time window during which @{product} can reauthenticate if needed. Creates the window measuring backward from the moment when credentials are set to expire."""
    sasl: NotRequired[OutputAzureEventhubAuthenticationTypedDict]
    r"""Authentication parameters to use when connecting to brokers. Using TLS is highly recommended."""
    tls: NotRequired[OutputAzureEventhubTLSSettingsClientSideTypedDict]
    on_backpressure: NotRequired[OutputAzureEventhubBackpressureBehavior]
    r"""How to handle events when all receivers are exerting backpressure"""
    description: NotRequired[str]
    pq_strict_ordering: NotRequired[bool]
    r"""Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed."""
    pq_rate_per_sec: NotRequired[float]
    r"""Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling."""
    pq_mode: NotRequired[OutputAzureEventhubMode]
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""
    pq_max_buffer_size: NotRequired[float]
    r"""The maximum number of events to hold in memory before writing the events to disk"""
    pq_max_backpressure_sec: NotRequired[float]
    r"""How long (in seconds) to wait for backpressure to resolve before engaging the queue"""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputAzureEventhubCompression]
    r"""Codec to use to compress the persisted data"""
    pq_on_backpressure: NotRequired[OutputAzureEventhubQueueFullBehavior]
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_controls: NotRequired[OutputAzureEventhubPqControlsTypedDict]


class OutputAzureEventhub(BaseModel):
    type: OutputAzureEventhubType

    brokers: List[str]
    r"""List of Event Hubs Kafka brokers to connect to, eg. yourdomain.servicebus.windows.net:9093. The hostname can be found in the host portion of the primary or secondary connection string in Shared Access Policies."""

    topic: str
    r"""The name of the Event Hub (Kafka Topic) to publish events. Can be overwritten using field __topicOut."""

    id: Optional[str] = None
    r"""Unique ID for this output"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    ack: Annotated[
        Optional[OutputAzureEventhubAcknowledgments],
        PlainValidator(validate_open_enum(True)),
    ] = OutputAzureEventhubAcknowledgments.ONE
    r"""Control the number of required acknowledgments"""

    format_: Annotated[
        Annotated[
            Optional[OutputAzureEventhubRecordDataFormat],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="format"),
    ] = OutputAzureEventhubRecordDataFormat.JSON
    r"""Format to use to serialize events before writing to the Event Hubs Kafka brokers"""

    max_record_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxRecordSizeKB")
    ] = 768
    r"""Maximum size of each record batch before compression. Setting should be < message.max.bytes settings in Event Hubs brokers."""

    flush_event_count: Annotated[
        Optional[float], pydantic.Field(alias="flushEventCount")
    ] = 1000
    r"""Maximum number of events in a batch before forcing a flush"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max record size."""

    connection_timeout: Annotated[
        Optional[float], pydantic.Field(alias="connectionTimeout")
    ] = 10000
    r"""Maximum time to wait for a connection to complete successfully"""

    request_timeout: Annotated[
        Optional[float], pydantic.Field(alias="requestTimeout")
    ] = 60000
    r"""Maximum time to wait for Kafka to respond to a request"""

    max_retries: Annotated[Optional[float], pydantic.Field(alias="maxRetries")] = 5
    r"""If messages are failing, you can set the maximum number of retries as high as 100 to prevent loss of data"""

    max_back_off: Annotated[Optional[float], pydantic.Field(alias="maxBackOff")] = 30000
    r"""The maximum wait time for a retry, in milliseconds. Default (and minimum) is 30,000 ms (30 seconds); maximum is 180,000 ms (180 seconds)."""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 300
    r"""Initial value used to calculate the retry, in milliseconds. Maximum is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Set the backoff multiplier (2-20) to control the retry frequency for failed messages. For faster retries, use a lower multiplier. For slower retries with more delay between attempts, use a higher multiplier. The multiplier is used in an exponential backoff formula; see the Kafka [documentation](https://kafka.js.org/docs/retry-detailed) for details."""

    authentication_timeout: Annotated[
        Optional[float], pydantic.Field(alias="authenticationTimeout")
    ] = 10000
    r"""Maximum time to wait for Kafka to respond to an authentication request"""

    reauthentication_threshold: Annotated[
        Optional[float], pydantic.Field(alias="reauthenticationThreshold")
    ] = 10000
    r"""Specifies a time window during which @{product} can reauthenticate if needed. Creates the window measuring backward from the moment when credentials are set to expire."""

    sasl: Optional[OutputAzureEventhubAuthentication] = None
    r"""Authentication parameters to use when connecting to brokers. Using TLS is highly recommended."""

    tls: Optional[OutputAzureEventhubTLSSettingsClientSide] = None

    on_backpressure: Annotated[
        Annotated[
            Optional[OutputAzureEventhubBackpressureBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputAzureEventhubBackpressureBehavior.BLOCK
    r"""How to handle events when all receivers are exerting backpressure"""

    description: Optional[str] = None

    pq_strict_ordering: Annotated[
        Optional[bool], pydantic.Field(alias="pqStrictOrdering")
    ] = True
    r"""Use FIFO (first in, first out) processing. Disable to forward new events to receivers before queue is flushed."""

    pq_rate_per_sec: Annotated[
        Optional[float], pydantic.Field(alias="pqRatePerSec")
    ] = 0
    r"""Throttling rate (in events per second) to impose while writing to Destinations from PQ. Defaults to 0, which disables throttling."""

    pq_mode: Annotated[
        Annotated[
            Optional[OutputAzureEventhubMode], PlainValidator(validate_open_enum(False))
        ],
        pydantic.Field(alias="pqMode"),
    ] = OutputAzureEventhubMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem if the Destination is unavailable. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination. In Always On mode, PQ always writes events to the filesystem."""

    pq_max_buffer_size: Annotated[
        Optional[float], pydantic.Field(alias="pqMaxBufferSize")
    ] = 42
    r"""The maximum number of events to hold in memory before writing the events to disk"""

    pq_max_backpressure_sec: Annotated[
        Optional[float], pydantic.Field(alias="pqMaxBackpressureSec")
    ] = 30
    r"""How long (in seconds) to wait for backpressure to resolve before engaging the queue"""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)"""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Annotated[
            Optional[OutputAzureEventhubCompression],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqCompress"),
    ] = OutputAzureEventhubCompression.NONE
    r"""Codec to use to compress the persisted data"""

    pq_on_backpressure: Annotated[
        Annotated[
            Optional[OutputAzureEventhubQueueFullBehavior],
            PlainValidator(validate_open_enum(False)),
        ],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputAzureEventhubQueueFullBehavior.BLOCK
    r"""How to handle events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_controls: Annotated[
        Optional[OutputAzureEventhubPqControls], pydantic.Field(alias="pqControls")
    ] = None
