"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .rbacresource import RbacResource
from cribl_control_plane import models
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import validate_open_enum
from pydantic import field_serializer
from pydantic.functional_validators import PlainValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ResourcePolicyTypedDict(TypedDict):
    gid: str
    policy: str
    type: RbacResource
    id: NotRequired[str]


class ResourcePolicy(BaseModel):
    gid: str

    policy: str

    type: Annotated[RbacResource, PlainValidator(validate_open_enum(False))]

    id: Optional[str] = None

    @field_serializer("type")
    def serialize_type(self, value):
        if isinstance(value, str):
            try:
                return models.RbacResource(value)
            except ValueError:
                return value
        return value
