// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Role string

const (
	RolePrimary Role = "primary"
	RoleStandby Role = "standby"
)

func (e Role) ToPointer() *Role {
	return &e
}
func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "standby":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

type Status string

const (
	StatusHealthy      Status = "healthy"
	StatusShuttingDown Status = "shutting down"
	StatusStandby      Status = "standby"
	StatusFakeStatus   Status = "fake_status"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "healthy":
		fallthrough
	case "shutting down":
		fallthrough
	case "standby":
		fallthrough
	case "fake_status":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type HealthStatus struct {
	Role      *Role   `json:"role,omitempty"`
	Status    Status  `json:"status"`
	StartTime float64 `json:"startTime"`
}

func (o *HealthStatus) GetRole() *Role {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *HealthStatus) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *HealthStatus) GetStartTime() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartTime
}
