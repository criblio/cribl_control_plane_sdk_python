// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type InputSyslogType2 string

const (
	InputSyslogType2Syslog InputSyslogType2 = "syslog"
)

func (e InputSyslogType2) ToPointer() *InputSyslogType2 {
	return &e
}

type InputSyslogConnection2 struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputSyslogConnection2) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputSyslogConnection2) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputSyslogMode2 - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSyslogMode2 string

const (
	InputSyslogMode2Smart  InputSyslogMode2 = "smart"
	InputSyslogMode2Always InputSyslogMode2 = "always"
)

func (e InputSyslogMode2) ToPointer() *InputSyslogMode2 {
	return &e
}

// InputSyslogCompression2 - Codec to use to compress the persisted data
type InputSyslogCompression2 string

const (
	InputSyslogCompression2None InputSyslogCompression2 = "none"
	InputSyslogCompression2Gzip InputSyslogCompression2 = "gzip"
)

func (e InputSyslogCompression2) ToPointer() *InputSyslogCompression2 {
	return &e
}

type InputSyslogPq2 struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSyslogMode2 `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputSyslogCompression2 `default:"none" json:"compress"`
}

func (i InputSyslogPq2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSyslogPq2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputSyslogPq2) GetMode() *InputSyslogMode2 {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputSyslogPq2) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSyslogPq2) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputSyslogPq2) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputSyslogPq2) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputSyslogPq2) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputSyslogPq2) GetCompress() *InputSyslogCompression2 {
	if o == nil {
		return nil
	}
	return o.Compress
}

type InputSyslogMinimumTLSVersion2 string

const (
	InputSyslogMinimumTLSVersion2TlSv1  InputSyslogMinimumTLSVersion2 = "TLSv1"
	InputSyslogMinimumTLSVersion2TlSv11 InputSyslogMinimumTLSVersion2 = "TLSv1.1"
	InputSyslogMinimumTLSVersion2TlSv12 InputSyslogMinimumTLSVersion2 = "TLSv1.2"
	InputSyslogMinimumTLSVersion2TlSv13 InputSyslogMinimumTLSVersion2 = "TLSv1.3"
)

func (e InputSyslogMinimumTLSVersion2) ToPointer() *InputSyslogMinimumTLSVersion2 {
	return &e
}

type InputSyslogMaximumTLSVersion2 string

const (
	InputSyslogMaximumTLSVersion2TlSv1  InputSyslogMaximumTLSVersion2 = "TLSv1"
	InputSyslogMaximumTLSVersion2TlSv11 InputSyslogMaximumTLSVersion2 = "TLSv1.1"
	InputSyslogMaximumTLSVersion2TlSv12 InputSyslogMaximumTLSVersion2 = "TLSv1.2"
	InputSyslogMaximumTLSVersion2TlSv13 InputSyslogMaximumTLSVersion2 = "TLSv1.3"
)

func (e InputSyslogMaximumTLSVersion2) ToPointer() *InputSyslogMaximumTLSVersion2 {
	return &e
}

type InputSyslogTLSSettingsServerSide2 struct {
	Disabled *bool `default:"true" json:"disabled"`
	// The name of the predefined certificate
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Passphrase to use to decrypt private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert        *bool                          `default:"false" json:"requestCert"`
	RejectUnauthorized any                            `json:"rejectUnauthorized,omitempty"`
	CommonNameRegex    any                            `json:"commonNameRegex,omitempty"`
	MinVersion         *InputSyslogMinimumTLSVersion2 `json:"minVersion,omitempty"`
	MaxVersion         *InputSyslogMaximumTLSVersion2 `json:"maxVersion,omitempty"`
}

func (i InputSyslogTLSSettingsServerSide2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSyslogTLSSettingsServerSide2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputSyslogTLSSettingsServerSide2) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSyslogTLSSettingsServerSide2) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *InputSyslogTLSSettingsServerSide2) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *InputSyslogTLSSettingsServerSide2) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *InputSyslogTLSSettingsServerSide2) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *InputSyslogTLSSettingsServerSide2) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *InputSyslogTLSSettingsServerSide2) GetRequestCert() *bool {
	if o == nil {
		return nil
	}
	return o.RequestCert
}

func (o *InputSyslogTLSSettingsServerSide2) GetRejectUnauthorized() any {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputSyslogTLSSettingsServerSide2) GetCommonNameRegex() any {
	if o == nil {
		return nil
	}
	return o.CommonNameRegex
}

func (o *InputSyslogTLSSettingsServerSide2) GetMinVersion() *InputSyslogMinimumTLSVersion2 {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *InputSyslogTLSSettingsServerSide2) GetMaxVersion() *InputSyslogMaximumTLSVersion2 {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

type InputSyslogMetadatum2 struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputSyslogMetadatum2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputSyslogMetadatum2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputSyslog2 struct {
	// Unique ID for this input
	ID       *string          `json:"id,omitempty"`
	Type     InputSyslogType2 `json:"type"`
	Disabled *bool            `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputSyslogConnection2 `json:"connections,omitempty"`
	Pq          *InputSyslogPq2          `json:"pq,omitempty"`
	// Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address.
	Host *string `default:"0.0.0.0" json:"host"`
	// Enter UDP port number to listen on. Not required if listening on TCP.
	UDPPort *float64 `json:"udpPort,omitempty"`
	// Enter TCP port number to listen on. Not required if listening on UDP.
	TCPPort float64 `json:"tcpPort"`
	// Maximum number of events to buffer when downstream is blocking. Only applies to UDP.
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// Regex matching IP addresses that are allowed to send data
	IPWhitelistRegex *string `default:"/.*/" json:"ipWhitelistRegex"`
	// Timezone to assign to timestamps without timezone info
	TimestampTimezone *string `default:"local" json:"timestampTimezone"`
	// Treat UDP packet data received as full syslog message
	SingleMsgUDPPackets *bool `default:"false" json:"singleMsgUdpPackets"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2
	EnableProxyHeader *bool `default:"false" json:"enableProxyHeader"`
	// Wildcard list of fields to keep from source data; * = ALL (default)
	KeepFieldsList []string `json:"keepFieldsList,omitempty"`
	// Enable if incoming messages use octet counting per RFC 6587.
	OctetCounting *bool `default:"false" json:"octetCounting"`
	// Enable if we should infer the syslog framing of the incoming messages.
	InferFraming *bool `default:"true" json:"inferFraming"`
	// Enable if we should infer octet counting only if the messages comply with RFC 5424.
	StrictlyInferOctetCounting *bool `default:"true" json:"strictlyInferOctetCounting"`
	// Enable if RFC 3164-formatted messages have hyphens in the app name portion of the TAG section. If disabled, only alphanumeric characters and underscores are allowed. Ignored for RFC 5424-formatted messages.
	AllowNonStandardAppName *bool `default:"false" json:"allowNonStandardAppName"`
	// Maximum number of active connections allowed per Worker Process for TCP connections. Use 0 for unlimited.
	MaxActiveCxn *float64 `default:"1000" json:"maxActiveCxn"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. After this time, the connection will be closed. Leave at 0 for no inactive socket monitoring.
	SocketIdleTimeout *float64 `default:"0" json:"socketIdleTimeout"`
	// How long the server will wait after initiating a closure for a client to close its end of the connection. If the client doesn't close the connection within this time, the server will forcefully terminate the socket to prevent resource leaks and ensure efficient connection cleanup and system stability. Leave at 0 for no inactive socket monitoring.
	SocketEndingMaxWait *float64 `default:"30" json:"socketEndingMaxWait"`
	// The maximum duration a socket can remain open, even if active. This helps manage resources and mitigate issues caused by TCP pinning. Set to 0 to disable.
	SocketMaxLifespan *float64                           `default:"0" json:"socketMaxLifespan"`
	TLS               *InputSyslogTLSSettingsServerSide2 `json:"tls,omitempty"`
	// Fields to add to events from this input
	Metadata []InputSyslogMetadatum2 `json:"metadata,omitempty"`
	// Optionally, set the SO_RCVBUF socket option for the UDP socket. This value tells the operating system how many bytes can be buffered in the kernel before events are dropped. Leave blank to use the OS default. Caution: Increasing this value will affect OS memory utilization.
	UDPSocketRxBufSize *float64 `json:"udpSocketRxBufSize,omitempty"`
	// Load balance traffic across all Worker Processes
	EnableLoadBalancing *bool   `default:"false" json:"enableLoadBalancing"`
	Description         *string `json:"description,omitempty"`
	// When enabled, parses PROXY protocol headers during the TLS handshake. Disable if compatibility issues arise.
	EnableEnhancedProxyHeaderParsing *bool `json:"enableEnhancedProxyHeaderParsing,omitempty"`
}

func (i InputSyslog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSyslog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputSyslog2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputSyslog2) GetType() InputSyslogType2 {
	if o == nil {
		return InputSyslogType2("")
	}
	return o.Type
}

func (o *InputSyslog2) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSyslog2) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputSyslog2) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputSyslog2) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputSyslog2) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputSyslog2) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputSyslog2) GetConnections() []InputSyslogConnection2 {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputSyslog2) GetPq() *InputSyslogPq2 {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputSyslog2) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *InputSyslog2) GetUDPPort() *float64 {
	if o == nil {
		return nil
	}
	return o.UDPPort
}

func (o *InputSyslog2) GetTCPPort() float64 {
	if o == nil {
		return 0.0
	}
	return o.TCPPort
}

func (o *InputSyslog2) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSyslog2) GetIPWhitelistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPWhitelistRegex
}

func (o *InputSyslog2) GetTimestampTimezone() *string {
	if o == nil {
		return nil
	}
	return o.TimestampTimezone
}

func (o *InputSyslog2) GetSingleMsgUDPPackets() *bool {
	if o == nil {
		return nil
	}
	return o.SingleMsgUDPPackets
}

func (o *InputSyslog2) GetEnableProxyHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProxyHeader
}

func (o *InputSyslog2) GetKeepFieldsList() []string {
	if o == nil {
		return nil
	}
	return o.KeepFieldsList
}

func (o *InputSyslog2) GetOctetCounting() *bool {
	if o == nil {
		return nil
	}
	return o.OctetCounting
}

func (o *InputSyslog2) GetInferFraming() *bool {
	if o == nil {
		return nil
	}
	return o.InferFraming
}

func (o *InputSyslog2) GetStrictlyInferOctetCounting() *bool {
	if o == nil {
		return nil
	}
	return o.StrictlyInferOctetCounting
}

func (o *InputSyslog2) GetAllowNonStandardAppName() *bool {
	if o == nil {
		return nil
	}
	return o.AllowNonStandardAppName
}

func (o *InputSyslog2) GetMaxActiveCxn() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveCxn
}

func (o *InputSyslog2) GetSocketIdleTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketIdleTimeout
}

func (o *InputSyslog2) GetSocketEndingMaxWait() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketEndingMaxWait
}

func (o *InputSyslog2) GetSocketMaxLifespan() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketMaxLifespan
}

func (o *InputSyslog2) GetTLS() *InputSyslogTLSSettingsServerSide2 {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *InputSyslog2) GetMetadata() []InputSyslogMetadatum2 {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputSyslog2) GetUDPSocketRxBufSize() *float64 {
	if o == nil {
		return nil
	}
	return o.UDPSocketRxBufSize
}

func (o *InputSyslog2) GetEnableLoadBalancing() *bool {
	if o == nil {
		return nil
	}
	return o.EnableLoadBalancing
}

func (o *InputSyslog2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputSyslog2) GetEnableEnhancedProxyHeaderParsing() *bool {
	if o == nil {
		return nil
	}
	return o.EnableEnhancedProxyHeaderParsing
}

type InputSyslogType1 string

const (
	InputSyslogType1Syslog InputSyslogType1 = "syslog"
)

func (e InputSyslogType1) ToPointer() *InputSyslogType1 {
	return &e
}

type InputSyslogConnection1 struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputSyslogConnection1) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputSyslogConnection1) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputSyslogMode1 - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSyslogMode1 string

const (
	InputSyslogMode1Smart  InputSyslogMode1 = "smart"
	InputSyslogMode1Always InputSyslogMode1 = "always"
)

func (e InputSyslogMode1) ToPointer() *InputSyslogMode1 {
	return &e
}

// InputSyslogCompression1 - Codec to use to compress the persisted data
type InputSyslogCompression1 string

const (
	InputSyslogCompression1None InputSyslogCompression1 = "none"
	InputSyslogCompression1Gzip InputSyslogCompression1 = "gzip"
)

func (e InputSyslogCompression1) ToPointer() *InputSyslogCompression1 {
	return &e
}

type InputSyslogPq1 struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSyslogMode1 `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputSyslogCompression1 `default:"none" json:"compress"`
}

func (i InputSyslogPq1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSyslogPq1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputSyslogPq1) GetMode() *InputSyslogMode1 {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputSyslogPq1) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSyslogPq1) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputSyslogPq1) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputSyslogPq1) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputSyslogPq1) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputSyslogPq1) GetCompress() *InputSyslogCompression1 {
	if o == nil {
		return nil
	}
	return o.Compress
}

type InputSyslogMinimumTLSVersion1 string

const (
	InputSyslogMinimumTLSVersion1TlSv1  InputSyslogMinimumTLSVersion1 = "TLSv1"
	InputSyslogMinimumTLSVersion1TlSv11 InputSyslogMinimumTLSVersion1 = "TLSv1.1"
	InputSyslogMinimumTLSVersion1TlSv12 InputSyslogMinimumTLSVersion1 = "TLSv1.2"
	InputSyslogMinimumTLSVersion1TlSv13 InputSyslogMinimumTLSVersion1 = "TLSv1.3"
)

func (e InputSyslogMinimumTLSVersion1) ToPointer() *InputSyslogMinimumTLSVersion1 {
	return &e
}

type InputSyslogMaximumTLSVersion1 string

const (
	InputSyslogMaximumTLSVersion1TlSv1  InputSyslogMaximumTLSVersion1 = "TLSv1"
	InputSyslogMaximumTLSVersion1TlSv11 InputSyslogMaximumTLSVersion1 = "TLSv1.1"
	InputSyslogMaximumTLSVersion1TlSv12 InputSyslogMaximumTLSVersion1 = "TLSv1.2"
	InputSyslogMaximumTLSVersion1TlSv13 InputSyslogMaximumTLSVersion1 = "TLSv1.3"
)

func (e InputSyslogMaximumTLSVersion1) ToPointer() *InputSyslogMaximumTLSVersion1 {
	return &e
}

type InputSyslogTLSSettingsServerSide1 struct {
	Disabled *bool `default:"true" json:"disabled"`
	// The name of the predefined certificate
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Passphrase to use to decrypt private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert        *bool                          `default:"false" json:"requestCert"`
	RejectUnauthorized any                            `json:"rejectUnauthorized,omitempty"`
	CommonNameRegex    any                            `json:"commonNameRegex,omitempty"`
	MinVersion         *InputSyslogMinimumTLSVersion1 `json:"minVersion,omitempty"`
	MaxVersion         *InputSyslogMaximumTLSVersion1 `json:"maxVersion,omitempty"`
}

func (i InputSyslogTLSSettingsServerSide1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSyslogTLSSettingsServerSide1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputSyslogTLSSettingsServerSide1) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSyslogTLSSettingsServerSide1) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *InputSyslogTLSSettingsServerSide1) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *InputSyslogTLSSettingsServerSide1) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *InputSyslogTLSSettingsServerSide1) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *InputSyslogTLSSettingsServerSide1) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *InputSyslogTLSSettingsServerSide1) GetRequestCert() *bool {
	if o == nil {
		return nil
	}
	return o.RequestCert
}

func (o *InputSyslogTLSSettingsServerSide1) GetRejectUnauthorized() any {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputSyslogTLSSettingsServerSide1) GetCommonNameRegex() any {
	if o == nil {
		return nil
	}
	return o.CommonNameRegex
}

func (o *InputSyslogTLSSettingsServerSide1) GetMinVersion() *InputSyslogMinimumTLSVersion1 {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *InputSyslogTLSSettingsServerSide1) GetMaxVersion() *InputSyslogMaximumTLSVersion1 {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

type InputSyslogMetadatum1 struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputSyslogMetadatum1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputSyslogMetadatum1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputSyslog1 struct {
	// Unique ID for this input
	ID       *string          `json:"id,omitempty"`
	Type     InputSyslogType1 `json:"type"`
	Disabled *bool            `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputSyslogConnection1 `json:"connections,omitempty"`
	Pq          *InputSyslogPq1          `json:"pq,omitempty"`
	// Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address.
	Host *string `default:"0.0.0.0" json:"host"`
	// Enter UDP port number to listen on. Not required if listening on TCP.
	UDPPort float64 `json:"udpPort"`
	// Enter TCP port number to listen on. Not required if listening on UDP.
	TCPPort *float64 `json:"tcpPort,omitempty"`
	// Maximum number of events to buffer when downstream is blocking. Only applies to UDP.
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// Regex matching IP addresses that are allowed to send data
	IPWhitelistRegex *string `default:"/.*/" json:"ipWhitelistRegex"`
	// Timezone to assign to timestamps without timezone info
	TimestampTimezone *string `default:"local" json:"timestampTimezone"`
	// Treat UDP packet data received as full syslog message
	SingleMsgUDPPackets *bool `default:"false" json:"singleMsgUdpPackets"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2
	EnableProxyHeader *bool `default:"false" json:"enableProxyHeader"`
	// Wildcard list of fields to keep from source data; * = ALL (default)
	KeepFieldsList []string `json:"keepFieldsList,omitempty"`
	// Enable if incoming messages use octet counting per RFC 6587.
	OctetCounting *bool `default:"false" json:"octetCounting"`
	// Enable if we should infer the syslog framing of the incoming messages.
	InferFraming *bool `default:"true" json:"inferFraming"`
	// Enable if we should infer octet counting only if the messages comply with RFC 5424.
	StrictlyInferOctetCounting *bool `default:"true" json:"strictlyInferOctetCounting"`
	// Enable if RFC 3164-formatted messages have hyphens in the app name portion of the TAG section. If disabled, only alphanumeric characters and underscores are allowed. Ignored for RFC 5424-formatted messages.
	AllowNonStandardAppName *bool `default:"false" json:"allowNonStandardAppName"`
	// Maximum number of active connections allowed per Worker Process for TCP connections. Use 0 for unlimited.
	MaxActiveCxn *float64 `default:"1000" json:"maxActiveCxn"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. After this time, the connection will be closed. Leave at 0 for no inactive socket monitoring.
	SocketIdleTimeout *float64 `default:"0" json:"socketIdleTimeout"`
	// How long the server will wait after initiating a closure for a client to close its end of the connection. If the client doesn't close the connection within this time, the server will forcefully terminate the socket to prevent resource leaks and ensure efficient connection cleanup and system stability. Leave at 0 for no inactive socket monitoring.
	SocketEndingMaxWait *float64 `default:"30" json:"socketEndingMaxWait"`
	// The maximum duration a socket can remain open, even if active. This helps manage resources and mitigate issues caused by TCP pinning. Set to 0 to disable.
	SocketMaxLifespan *float64                           `default:"0" json:"socketMaxLifespan"`
	TLS               *InputSyslogTLSSettingsServerSide1 `json:"tls,omitempty"`
	// Fields to add to events from this input
	Metadata []InputSyslogMetadatum1 `json:"metadata,omitempty"`
	// Optionally, set the SO_RCVBUF socket option for the UDP socket. This value tells the operating system how many bytes can be buffered in the kernel before events are dropped. Leave blank to use the OS default. Caution: Increasing this value will affect OS memory utilization.
	UDPSocketRxBufSize *float64 `json:"udpSocketRxBufSize,omitempty"`
	// Load balance traffic across all Worker Processes
	EnableLoadBalancing *bool   `default:"false" json:"enableLoadBalancing"`
	Description         *string `json:"description,omitempty"`
	// When enabled, parses PROXY protocol headers during the TLS handshake. Disable if compatibility issues arise.
	EnableEnhancedProxyHeaderParsing *bool `json:"enableEnhancedProxyHeaderParsing,omitempty"`
}

func (i InputSyslog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputSyslog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputSyslog1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputSyslog1) GetType() InputSyslogType1 {
	if o == nil {
		return InputSyslogType1("")
	}
	return o.Type
}

func (o *InputSyslog1) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSyslog1) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputSyslog1) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputSyslog1) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputSyslog1) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputSyslog1) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputSyslog1) GetConnections() []InputSyslogConnection1 {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputSyslog1) GetPq() *InputSyslogPq1 {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputSyslog1) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *InputSyslog1) GetUDPPort() float64 {
	if o == nil {
		return 0.0
	}
	return o.UDPPort
}

func (o *InputSyslog1) GetTCPPort() *float64 {
	if o == nil {
		return nil
	}
	return o.TCPPort
}

func (o *InputSyslog1) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSyslog1) GetIPWhitelistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPWhitelistRegex
}

func (o *InputSyslog1) GetTimestampTimezone() *string {
	if o == nil {
		return nil
	}
	return o.TimestampTimezone
}

func (o *InputSyslog1) GetSingleMsgUDPPackets() *bool {
	if o == nil {
		return nil
	}
	return o.SingleMsgUDPPackets
}

func (o *InputSyslog1) GetEnableProxyHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProxyHeader
}

func (o *InputSyslog1) GetKeepFieldsList() []string {
	if o == nil {
		return nil
	}
	return o.KeepFieldsList
}

func (o *InputSyslog1) GetOctetCounting() *bool {
	if o == nil {
		return nil
	}
	return o.OctetCounting
}

func (o *InputSyslog1) GetInferFraming() *bool {
	if o == nil {
		return nil
	}
	return o.InferFraming
}

func (o *InputSyslog1) GetStrictlyInferOctetCounting() *bool {
	if o == nil {
		return nil
	}
	return o.StrictlyInferOctetCounting
}

func (o *InputSyslog1) GetAllowNonStandardAppName() *bool {
	if o == nil {
		return nil
	}
	return o.AllowNonStandardAppName
}

func (o *InputSyslog1) GetMaxActiveCxn() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveCxn
}

func (o *InputSyslog1) GetSocketIdleTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketIdleTimeout
}

func (o *InputSyslog1) GetSocketEndingMaxWait() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketEndingMaxWait
}

func (o *InputSyslog1) GetSocketMaxLifespan() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketMaxLifespan
}

func (o *InputSyslog1) GetTLS() *InputSyslogTLSSettingsServerSide1 {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *InputSyslog1) GetMetadata() []InputSyslogMetadatum1 {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputSyslog1) GetUDPSocketRxBufSize() *float64 {
	if o == nil {
		return nil
	}
	return o.UDPSocketRxBufSize
}

func (o *InputSyslog1) GetEnableLoadBalancing() *bool {
	if o == nil {
		return nil
	}
	return o.EnableLoadBalancing
}

func (o *InputSyslog1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputSyslog1) GetEnableEnhancedProxyHeaderParsing() *bool {
	if o == nil {
		return nil
	}
	return o.EnableEnhancedProxyHeaderParsing
}

type InputSyslogUnionType string

const (
	InputSyslogUnionTypeInputSyslog1 InputSyslogUnionType = "InputSyslog_1"
	InputSyslogUnionTypeInputSyslog2 InputSyslogUnionType = "InputSyslog_2"
)

type InputSyslogUnion struct {
	InputSyslog1 *InputSyslog1 `queryParam:"inline"`
	InputSyslog2 *InputSyslog2 `queryParam:"inline"`

	Type InputSyslogUnionType
}

func CreateInputSyslogUnionInputSyslog1(inputSyslog1 InputSyslog1) InputSyslogUnion {
	typ := InputSyslogUnionTypeInputSyslog1

	return InputSyslogUnion{
		InputSyslog1: &inputSyslog1,
		Type:         typ,
	}
}

func CreateInputSyslogUnionInputSyslog2(inputSyslog2 InputSyslog2) InputSyslogUnion {
	typ := InputSyslogUnionTypeInputSyslog2

	return InputSyslogUnion{
		InputSyslog2: &inputSyslog2,
		Type:         typ,
	}
}

func (u *InputSyslogUnion) UnmarshalJSON(data []byte) error {

	var inputSyslog1 InputSyslog1 = InputSyslog1{}
	if err := utils.UnmarshalJSON(data, &inputSyslog1, "", true, true); err == nil {
		u.InputSyslog1 = &inputSyslog1
		u.Type = InputSyslogUnionTypeInputSyslog1
		return nil
	}

	var inputSyslog2 InputSyslog2 = InputSyslog2{}
	if err := utils.UnmarshalJSON(data, &inputSyslog2, "", true, true); err == nil {
		u.InputSyslog2 = &inputSyslog2
		u.Type = InputSyslogUnionTypeInputSyslog2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InputSyslogUnion", string(data))
}

func (u InputSyslogUnion) MarshalJSON() ([]byte, error) {
	if u.InputSyslog1 != nil {
		return utils.MarshalJSON(u.InputSyslog1, "", true)
	}

	if u.InputSyslog2 != nil {
		return utils.MarshalJSON(u.InputSyslog2, "", true)
	}

	return nil, errors.New("could not marshal union type InputSyslogUnion: all fields are null")
}
