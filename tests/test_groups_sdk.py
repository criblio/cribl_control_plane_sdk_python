"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
import pytest
from tests.test_client import create_test_http_client


def test_groups_sdk_get_groups_config_version_by_id():
    test_http_client = create_test_http_client("getGroupsConfigVersionById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.groups.get_groups_config_version_by_id(id="<id>")
        assert res is not None
        assert res == models.GetGroupsConfigVersionByIDResponse()


def test_groups_sdk_create_products_groups_by_product():
    test_http_client = create_test_http_client("createProductsGroupsByProduct")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.groups.create_products_groups_by_product(
            product=models.CreateProductsGroupsByProductProduct.STREAM,
            config_version="<value>",
            id="<id>",
        )
        assert res is not None
        assert res == models.CreateProductsGroupsByProductResponse()


def test_groups_sdk_get_products_groups_by_product():
    test_http_client = create_test_http_client("getProductsGroupsByProduct")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.groups.get_products_groups_by_product(
            product=models.GetProductsGroupsByProductProduct.STREAM
        )
        assert res is not None
        assert res == models.GetProductsGroupsByProductResponse()


def test_groups_sdk_update_groups_deploy_by_id():
    test_http_client = create_test_http_client("updateGroupsDeployById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.groups.update_groups_deploy_by_id(id="<id>", version="<value>")
        assert res is not None
        assert res == models.UpdateGroupsDeployByIDResponse()


def test_groups_sdk_get_groups_by_id():
    test_http_client = create_test_http_client("getGroupsById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.groups.get_groups_by_id(id="<id>")
        assert res is not None
        assert res == models.GetGroupsByIDResponse()


def test_groups_sdk_get_groups_acl_by_id():
    test_http_client = create_test_http_client("getGroupsAclById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.groups.get_groups_acl_by_id(id="<id>")
        assert res is not None
        assert res == models.GetGroupsACLByIDResponse()


def test_groups_sdk_delete_groups_by_id():
    test_http_client = create_test_http_client("deleteGroupsById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.groups.delete_groups_by_id(id="<id>")
        assert res is not None
        assert res == models.DeleteGroupsByIDResponse()


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step updateGroupsById.test referencing operation updateGroupsById missing required path parameter id_param`]"
)
def test_groups_sdk_update_groups_by_id():
    pass
