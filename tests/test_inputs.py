"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
from tests.test_client import create_test_http_client


def test_inputs_list_input():
    test_http_client = create_test_http_client("listInput")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.inputs.list_input()
        assert res is not None
        assert res == models.ListInputResponse()


def test_inputs_create_input():
    test_http_client = create_test_http_client("createInput")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.inputs.create_input(
            request={
                "disabled": False,
                "send_to_routes": True,
                "pq_enabled": False,
                "host": "0.0.0.0",
                "port": 301.76,
                "ip_whitelist_regex": "/.*/",
                "max_active_cxn": 1000,
                "socket_idle_timeout": 0,
                "socket_ending_max_wait": 30,
                "socket_max_lifespan": 0,
                "enable_proxy_header": False,
                "stale_channel_flush_ms": 10000,
                "enable_header": False,
                "auth_type": models.InputTCPAuthenticationMethod.MANUAL,
            }
        )
        assert res is not None
        assert res == models.CreateInputResponse()


def test_inputs_get_input_by_id():
    test_http_client = create_test_http_client("getInputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.inputs.get_input_by_id(id="<id>")
        assert res is not None
        assert res == models.GetInputByIDResponse()


def test_inputs_update_input_by_id():
    test_http_client = create_test_http_client("updateInputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.inputs.update_input_by_id(
            id="<id>",
            input_={
                "id": "<id>",
                "type": models.InputKubeEventsType.KUBE_EVENTS,
                "disabled": False,
                "send_to_routes": True,
                "pq_enabled": False,
            },
        )
        assert res is not None
        assert res == models.UpdateInputByIDResponse()


def test_inputs_delete_input_by_id():
    test_http_client = create_test_http_client("deleteInputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.inputs.delete_input_by_id(id="<id>")
        assert res is not None
        assert res == models.DeleteInputByIDResponse()


def test_inputs_create_input_hec_token_by_id():
    test_http_client = create_test_http_client("createInputHecTokenById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.inputs.create_input_hec_token_by_id(id="<id>", token="<value>")
        assert res is not None
        assert res == models.CreateInputHecTokenByIDResponse()


def test_inputs_update_input_hec_token_by_id_and_token():
    test_http_client = create_test_http_client("updateInputHecTokenByIdAndToken")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.inputs.update_input_hec_token_by_id_and_token(
            id="<id>", token="<value>"
        )
        assert res is not None
        assert res == models.UpdateInputHecTokenByIDAndTokenResponse()
