"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
from tests.test_client import create_test_http_client


def test_outputs_list_output():
    test_http_client = create_test_http_client("listOutput")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.list_output()
        assert res is not None
        assert res == models.ListOutputResponse()


def test_outputs_create_output():
    test_http_client = create_test_http_client("createOutput")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.create_output(
            request={
                "url": "https://probable-rationale.com/",
                "index": "<value>",
                "concurrency": 5,
                "max_payload_size_kb": 4096,
                "max_payload_events": 0,
                "compress": True,
                "reject_unauthorized": True,
                "timeout_sec": 30,
                "flush_period_sec": 1,
                "failed_request_logging_mode": models.OutputElasticCloudFailedRequestLoggingMode.NONE,
                "include_doc_id": True,
                "response_honor_retry_after_header": False,
                "on_backpressure": models.OutputElasticCloudBackpressureBehavior.BLOCK,
                "pq_max_file_size": "1 MB",
                "pq_max_size": "5GB",
                "pq_path": "$CRIBL_HOME/state/queues",
                "pq_compress": models.OutputElasticCloudCompression.NONE,
                "pq_on_backpressure": models.OutputElasticCloudQueueFullBehavior.BLOCK,
                "pq_mode": models.OutputElasticCloudMode.ERROR,
            }
        )
        assert res is not None
        assert res == models.CreateOutputResponse()


def test_outputs_get_output_by_id():
    test_http_client = create_test_http_client("getOutputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.get_output_by_id(id="<id>")
        assert res is not None
        assert res == models.GetOutputByIDResponse()


def test_outputs_update_output_by_id():
    test_http_client = create_test_http_client("updateOutputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.update_output_by_id(
            id="<id>",
            output={
                "type": models.OutputSignalfxType.SIGNALFX,
                "auth_type": models.OutputSignalfxAuthenticationMethod.MANUAL,
                "realm": "us0",
                "concurrency": 5,
                "max_payload_size_kb": 4096,
                "max_payload_events": 0,
                "compress": True,
                "reject_unauthorized": True,
                "timeout_sec": 30,
                "flush_period_sec": 1,
                "use_round_robin_dns": False,
                "failed_request_logging_mode": models.OutputSignalfxFailedRequestLoggingMode.NONE,
                "response_honor_retry_after_header": False,
                "on_backpressure": models.OutputSignalfxBackpressureBehavior.BLOCK,
                "pq_max_file_size": "1 MB",
                "pq_max_size": "5GB",
                "pq_path": "$CRIBL_HOME/state/queues",
                "pq_compress": models.OutputSignalfxCompression.NONE,
                "pq_on_backpressure": models.OutputSignalfxQueueFullBehavior.BLOCK,
                "pq_mode": models.OutputSignalfxMode.ERROR,
            },
        )
        assert res is not None
        assert res == models.UpdateOutputByIDResponse()


def test_outputs_delete_output_by_id():
    test_http_client = create_test_http_client("deleteOutputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.delete_output_by_id(id="<id>")
        assert res is not None
        assert res == models.DeleteOutputByIDResponse()


def test_outputs_delete_output_pq_by_id():
    test_http_client = create_test_http_client("deleteOutputPqById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.delete_output_pq_by_id(id="<id>")
        assert res is not None
        assert res == models.DeleteOutputPqByIDResponse()


def test_outputs_get_output_pq_by_id():
    test_http_client = create_test_http_client("getOutputPqById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.get_output_pq_by_id(id="<id>")
        assert res is not None
        assert res == models.GetOutputPqByIDResponse()


def test_outputs_get_output_samples_by_id():
    test_http_client = create_test_http_client("getOutputSamplesById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.get_output_samples_by_id(id="<id>")
        assert res is not None
        assert res == models.GetOutputSamplesByIDResponse()


def test_outputs_create_output_test_by_id():
    test_http_client = create_test_http_client("createOutputTestById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.outputs.create_output_test_by_id(
            id="<id>",
            events=[
                {
                    "raw": "<value>",
                },
            ],
        )
        assert res is not None
        assert res == models.CreateOutputTestByIDResponse()
