"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
from tests.test_client import create_test_http_client


def test_packs_create_packs():
    test_http_client = create_test_http_client("createPacks")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.packs.create_packs(id="<id>", source="<value>")
        assert res is not None
        assert res == models.CreatePacksResponse()


def test_packs_get_packs():
    test_http_client = create_test_http_client("getPacks")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.packs.get_packs()
        assert res is not None
        assert res == models.GetPacksResponse()


def test_packs_update_packs():
    test_http_client = create_test_http_client("updatePacks")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.packs.update_packs(
            filename="example.file",
            size=779474,
            file={
                "file_name": "example.file",
                "content": open(".speakeasy/testfiles/example.file", "rb"),
            },
        )
        assert res is not None
        assert res == models.UpdatePacksResponse()


def test_packs_delete_packs_by_id():
    test_http_client = create_test_http_client("deletePacksById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.packs.delete_packs_by_id(id="<id>")
        assert res is not None
        assert res == models.DeletePacksByIDResponse()


def test_packs_update_packs_by_id():
    test_http_client = create_test_http_client("updatePacksById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.packs.update_packs_by_id(id="<id>")
        assert res is not None
        assert res == models.UpdatePacksByIDResponse()
