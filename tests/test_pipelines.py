"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
import pytest
from tests.test_client import create_test_http_client


def test_pipelines_list_pipeline():
    test_http_client = create_test_http_client("listPipeline")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.pipelines.list_pipeline()
        assert res is not None
        assert res == models.ListPipelineResponse()


def test_pipelines_create_pipeline():
    test_http_client = create_test_http_client("createPipeline")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.pipelines.create_pipeline(id="<id>", conf={})
        assert res is not None
        assert res == models.CreatePipelineResponse()


def test_pipelines_get_pipeline_by_id():
    test_http_client = create_test_http_client("getPipelineById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.pipelines.get_pipeline_by_id(id="<id>")
        assert res is not None
        assert res == models.GetPipelineByIDResponse()


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step updatePipelineById.test referencing operation updatePipelineById missing required path parameter id_param`]"
)
def test_pipelines_update_pipeline_by_id():
    pass


def test_pipelines_delete_pipeline_by_id():
    test_http_client = create_test_http_client("deletePipelineById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.pipelines.delete_pipeline_by_id(id="<id>")
        assert res is not None
        assert res == models.DeletePipelineByIDResponse()
