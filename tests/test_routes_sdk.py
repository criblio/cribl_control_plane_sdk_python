"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
import pytest
from tests.test_client import create_test_http_client


def test_routes_sdk_list_routes():
    test_http_client = create_test_http_client("listRoutes")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.routes.list_routes()
        assert res is not None
        assert res == models.ListRoutesResponse()


def test_routes_sdk_get_routes_by_id():
    test_http_client = create_test_http_client("getRoutesById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.routes.get_routes_by_id(id="<id>")
        assert res is not None
        assert res == models.GetRoutesByIDResponse()


@pytest.mark.skip(
    reason="incomplete test found please make sure to address the following errors: [`workflow step updateRoutesById.test referencing operation updateRoutesById missing required path parameter id_param`]"
)
def test_routes_sdk_update_routes_by_id():
    pass


def test_routes_sdk_create_routes_append_by_id():
    test_http_client = create_test_http_client("createRoutesAppendById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.routes.create_routes_append_by_id(id="<id>", request_body=[])
        assert res is not None
        assert res == models.CreateRoutesAppendByIDResponse()
