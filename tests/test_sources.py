"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
from tests.test_client import create_test_http_client


def test_sources_test_inputs():
    test_http_client = create_test_http_client("testInputs")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        security=models.Security(
            bearer_auth=os.getenv("TEST_BEARER_TOKEN", "value"),
        ),
        client=test_http_client,
    ) as ccp_client:
        assert ccp_client is not None

        list_res = ccp_client.sources.list_source()
        assert list_res is not None

        assert ccp_client is not None

        create_res = ccp_client.sources.create_source(
            request={
                "id": "inputOne",
                "type": models.InputExecType.EXEC,
                "command": "echo hello",
            }
        )
        assert create_res is not None
        assert create_res.count is not None
        assert create_res.count == 1


def test_sources_get_input_by_id():
    test_http_client = create_test_http_client("getInputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.sources.get_source_by_id(id="<id>")
        assert res is not None
        assert res == models.GetInputByIDResponse()


def test_sources_update_input_by_id():
    test_http_client = create_test_http_client("updateInputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.sources.update_source_by_id(
            id="<id>",
            input_={
                "id": "<id>",
                "type": models.InputKubeEventsType.KUBE_EVENTS,
                "disabled": False,
                "send_to_routes": True,
                "pq_enabled": False,
            },
        )
        assert res is not None
        assert res == models.UpdateInputByIDResponse()


def test_sources_delete_input_by_id():
    test_http_client = create_test_http_client("deleteInputById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.sources.delete_source_by_id(id="<id>")
        assert res is not None
        assert res == models.DeleteInputByIDResponse()


def test_sources_create_input_hec_token_by_id():
    test_http_client = create_test_http_client("createInputHecTokenById")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.sources.create_source_hec_token_by_id(
            id="<id>", token="<value>"
        )
        assert res is not None
        assert res == models.CreateInputHecTokenByIDResponse()


def test_sources_update_input_hec_token_by_id_and_token():
    test_http_client = create_test_http_client("updateInputHecTokenByIdAndToken")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.sources.update_source_hec_token_by_id_and_token(
            id="<id>", token="<value>"
        )
        assert res is not None
        assert res == models.UpdateInputHecTokenByIDAndTokenResponse()
