"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from cribl_control_plane import CriblControlPlane, models
import os
from tests.test_client import create_test_http_client


def test_versioning_get_version_branch():
    test_http_client = create_test_http_client("getVersionBranch")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_branch()
        assert res is not None
        assert res == models.GetVersionBranchResponse()


def test_versioning_create_version_commit():
    test_http_client = create_test_http_client("createVersionCommit")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.create_version_commit(message="<value>")
        assert res is not None
        assert res == models.CreateVersionCommitResponse()


def test_versioning_get_version_count():
    test_http_client = create_test_http_client("getVersionCount")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_count()
        assert res is not None
        assert res == models.GetVersionCountResponse()


def test_versioning_get_version_current_branch():
    test_http_client = create_test_http_client("getVersionCurrentBranch")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_current_branch()
        assert res is not None
        assert res == models.GetVersionCurrentBranchResponse()


def test_versioning_get_version_diff():
    test_http_client = create_test_http_client("getVersionDiff")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_diff()
        assert res is not None
        assert res == models.GetVersionDiffResponse()


def test_versioning_get_version_files():
    test_http_client = create_test_http_client("getVersionFiles")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_files()
        assert res is not None
        assert res == models.GetVersionFilesResponse()


def test_versioning_get_version_info():
    test_http_client = create_test_http_client("getVersionInfo")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_info()
        assert res is not None
        assert res == models.GetVersionInfoResponse()


def test_versioning_create_version_push():
    test_http_client = create_test_http_client("createVersionPush")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.create_version_push()
        assert res is not None
        assert res == models.CreateVersionPushResponse()


def test_versioning_create_version_revert():
    test_http_client = create_test_http_client("createVersionRevert")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.create_version_revert(
            commit="<value>", message="<value>"
        )
        assert res is not None
        assert res == models.CreateVersionRevertResponse()


def test_versioning_get_version_show():
    test_http_client = create_test_http_client("getVersionShow")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_show()
        assert res is not None
        assert res == models.GetVersionShowResponse()


def test_versioning_get_version_status():
    test_http_client = create_test_http_client("getVersionStatus")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.get_version_status()
        assert res is not None
        assert res == models.GetVersionStatusResponse()


def test_versioning_create_version_sync():
    test_http_client = create_test_http_client("createVersionSync")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.create_version_sync()
        assert res is not None
        assert res == models.CreateVersionSyncResponse()


def test_versioning_create_version_undo():
    test_http_client = create_test_http_client("createVersionUndo")

    with CriblControlPlane(
        server_url=os.getenv("TEST_SERVER_URL", "http://localhost:18080"),
        client=test_http_client,
        security=models.Security(
            bearer_auth=os.getenv("CRIBLCONTROLPLANE_BEARER_AUTH", "value"),
        ),
    ) as ccp_client:
        assert ccp_client is not None

        res = ccp_client.versioning.create_version_undo()
        assert res is not None
        assert res == models.CreateVersionUndoResponse()
